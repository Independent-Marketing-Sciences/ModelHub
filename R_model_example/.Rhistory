from natsort import natsorted
num_cores = int(r.betweenChainCores)
numpyro.set_platform('cpu')
numpyro.set_host_device_count(num_cores)
jax.device_count()
import numpyro
import numpyro.distributions as dist
from numpyro.distributions import constraints
import jax.numpy as jnp
# We need a new class of distribution to recreate the "flat" prior that is used
# in R. This is the default option when you don't specify any priors.
class Flat(dist.Distribution):
support = constraints.real
has_rsample = False
def sample(self, key, sample_shape=()):
raise NotImplementedError("Flat distribution cannot be sampled from")
def log_prob(self, value):
return jnp.zeros_like(value)
# This function only accepts two arguments and it is used to feed the NUTS sampler
# algorithm implemented in Numpyro. It is NOT recommended to add other arguments
# to this function as currently (September 2024) the NUTS method which takes this
# function as its argument don't work with additional arguments.
def model(X, y=None, bay_priors=None):
n_features = X.shape[1]
# Define a vector of coefficients with a flat-ish prior
beta = jnp.array([numpyro.sample(f"beta_{i}", bay_priors[i]) for i in range(n_features)])
# Define the standard deviation of the noise
sigma = numpyro.sample("sigma", dist.HalfCauchy(5.0))
# Linear model
mu = jnp.dot(X, beta)
# Likelihood
numpyro.sample("y", dist.Normal(mu, sigma), obs=y)
# Function to estimate p-values from Bayesian regression
def bayesian_p_values(posterior_samples):
"""
Calculate the p_direction and p_value for multiple beta parameters
based on the posterior samples from a Bayesian regression.
Parameters:
-----------
posterior_samples : jax.numpy array
2D array where each column corresponds to the posterior samples
for a specific beta parameter.
Returns:
--------
p_direction : jax.numpy array
Vector of p_direction values for each beta parameter.
p_value : jax.numpy array
Vector of p-values calculated from p_direction for each beta parameter.
"""
# Filter to extract only beta-related keys (assuming they start with 'beta')
beta_keys = [key for key in posterior_samples.keys() if key.startswith('beta')]
# Extract the samples for all betas and stack them along axis 1 (columns)
beta_samples = jnp.column_stack([posterior_samples[key] for key in beta_keys])
# Calculate the median for each beta (axis 0 is the samples)
medians = jnp.median(beta_samples, axis=0)
# Calculate p_direction for each beta based on the sign of the median
p_direction = jnp.where(medians > 0,
jnp.mean(beta_samples > 0, axis=0),
jnp.mean(beta_samples < 0, axis=0))
# Convert p_direction to p-value using the formula p = 2 * (1 - pd)
p_values = 2 * (1 - p_direction)
return p_direction, p_values
### Converting string to numpyro distribution object
# Mapping between distribution names and corresponding constructor functions
DIST_MAP = {
"normal": (dist.Normal, 2),
"studentt": (dist.StudentT, 3),
}
def parse_distribution_string(dist_string, low=None, high=None):
dist_name, params = dist_string.split('(')
params = params.rstrip(')')
param_values = list(map(float, params.split(',')))
if dist_name not in DIST_MAP:
raise ValueError(f"Unknown distribution: {dist_name}")
dist_constructor, required_params = DIST_MAP[dist_name]
if len(param_values) != required_params:
raise ValueError(f"{dist_name} requires {required_params} parameters, got {len(param_values)}")
loc, scale = param_values
base_distribution = dist.Normal(loc=loc, scale=scale)
base_distribution = dist_constructor(*param_values)
return dist.TruncatedDistribution(base_distribution, low=low, high=high)
def get_bound(value, default):
return default if value == "NA" else float(value)
def get_distribution(prior, lb, ub):
if prior == "":
if lb == "NA" and ub == "NA":
return Flat()
lb_float = get_bound(lb, -jnp.inf)
ub_float = get_bound(ub, jnp.inf)
if lb == "NA":
return dist.Uniform(-10, ub_float)
elif ub == "NA":
return dist.Uniform(lb_float, 10)
else:
return dist.Uniform(lb_float, ub_float)
else:
low = get_bound(lb, None)
high = get_bound(ub, None)
return parse_distribution_string(prior, low, high)
jax.device_count()
r_priors_df = r.priors
# Convert priors in a format that can be read by numpyro
dist_list = [get_distribution(r_priors_df.prior[i], r_priors_df.lb[i], r_priors_df.ub[i]) for i in range(len(r_priors_df))]
# Use the regression dataframe provided by R
y = r.regBayData['y']
X = r.regBayData.iloc[:, 1:]
X = jnp.array(X)
y = jnp.array(y)
jax.device_count()
nuts_kernel = NUTS(model)
seed = 123
rng_key = jax.random.PRNGKey(seed)
mcmc = MCMC(
nuts_kernel,
num_samples=int(r.iter),
num_warmup=int(r.warmup),
num_chains=int(r.chains))
mcmc.run(rng_key, X=X, y=y, bay_priors=dist_list)
jax.config.update('jax_debug_nans', True)
jax.config.update('jax_debug_warn_tracer_leaks', True)
from jax import checking_leaks
with checking_leaks():
# Run your MCMC code here
mcmc.run(rng_key, X=X, y=y, bay_priors=dist_list)
jax.config.update('jax_debug_nans', True)
from jax import checking_leaks
with checking_leaks():
# Run your MCMC code here
mcmc.run(rng_key, X=X, y=y, bay_priors=dist_list)
numpyro.set_host_device_count(1)
jax.device_count()
library(reticulate)
install.packages("reticulate")
uninstall.packages("reticulate")
remove.packages("reticulate")
install.packages("reticulate")
# Suppress warnings
options(warn = -1)
print("Loading packages")
library("lmtest")
library("tidyverse")
library("mgsub")
library("devtools")
library("tseries")
library("FinTS")
library("sandwich")
library("stringi")
library("car")
library("AEP")
# Set working directory from clipboard
wdDir <- readClipboard()
if (grepl("\\", paste(wdDir, " ", sep = ""), fixed = TRUE)) {
setwd(wdDir)
} else {
if (Sys.getenv("USERNAME") == "David Lanham") {
setwd("C:/Users/David Lanham/OneDrive - im-sciences.com/Documents/RandExcelRegression")
} else if (Sys.getenv("USERNAME") == "Huy Nguyen") {
setwd("C:/Users/david/OneDrive/Documents/RandExcelRegression4.2.1") # to update
} else if (Sys.getenv("USERNAME") == "AndreaRimondi") {
setwd("C:/Users/AndreaRimondi/Documents/RModellingTool") # to update
} else if (Sys.getenv("USERNAME") == "IlonaZasadzinska") {
setwd("C:/Users/IlonaZasadzinska/Documents/R modelling tool") # to update
# etc.
}  else if (Sys.getenv("USERNAME") == "Luke Hamilton") {
setwd("C:/Users/Luke Hamilton/Documents/R Modelling Tool") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "vmadmin") {
setwd("C:/Users/vmadmin/Documents/RModellingTooll") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "DanielHallsworth") {
setwd("C:/Users/DanielHallsworth/Documents/R Modelling Tool") # to update
# etc.
}
}
load_all('Package/lanzR')
# Importing Data
print("1. Importing Data");source("Regression Scripts/Importing Data.R")
# Data Preparation
print("2. Data Preparation");source("Regression Scripts/Data Preparation.R")
# Variable Transformations
print("3. Variable Transformations");source("Regression Scripts/Variable Transformations.R")
# Regression Setup
print("4. Regression Setup");source("Regression Scripts/Regression Setup.R")
if(regApproach != "bayesian") {
# Frequentist Regression
print("5. Regression");source("Regression Scripts/OLSRegression.R")
# Diagnostic Tests
print("5.2. Diagnostic Tests");source("Regression Scripts/Diagnostic Tests.R")
} else {
# Libraries
library("brms")
library("rstan")
library("parallel")
library("bayestestR")
library("reticulate")
# Bayesian Regression
print("5. Regression");source("Regression Scripts/BAYRegression.R")
}
# Contributions & Model Outputs
print("6. Model Decomp");source("Regression Scripts/Model Decomp.R")
# Post Modeling Analysis
print("7. Post Modelling Analysis");source("Regression Scripts/Post Modelling Analysis.R")
rm(modelDetailsCsv, xsDetailsCsv, VariableDetailsCsv, redRawVarData, transVarByXsDataLong,  modelDw, modelFit, modVarCode,
obsCnt)
rm(identVarName, kpiVarName, modelledVarNames)
print("Writing outputs")
# Export Outputs
write.csv(avmDetailsXsDf,"RegressionTables/avmDetailsXsDf.csv", row.names = FALSE)
write.csv(avmDetailsTotDf,"RegressionTables/avmDetailsTotDf.csv", row.names = FALSE)
write.csv(varContsXsDf,"RegressionTables/VarContsXsDf.csv", row.names = FALSE)
write.csv(varContsTotDf,"RegressionTables/varContsTotDf.csv", row.names = FALSE)
write.csv(catContsXsDf,"RegressionTables/catContsXsDf.csv", row.names = FALSE)
write.csv(catContsTotDf,"RegressionTables/catContsTotDf.csv", row.names = FALSE)
write.csv(regVariableDetailsDf,"RegressionTables/VariableDetails.csv", row.names = FALSE)
write.csv(regVarDetailsStackedDf,"RegressionTables/regVarDetailsStackedDf.csv", row.names = FALSE)
write.csv(modelDetailsDf,"RegressionTables/modelDetails.csv", row.names = TRUE)
write.csv(regCatStatsDf,"RegressionTables/regCatStatsDf.csv", row.names = FALSE)
write.csv(prevRunDetails,"RegressionTables/prevRunDetails.csv", row.names = FALSE)
write.table(modelPermSummary, "RegressionTables/permSummary.csv", row.names = FALSE, col.names = FALSE, sep=",") # write.table needed to remove col names
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memory and report the memory usage.
# SETUP *************************************************************************************************************************************
# *******************************************************************************************************************************************
# Suppress warnings
options(warn = -1)
print("Loading packages")
library("lmtest")
library("tidyverse")
library("mgsub")
library("devtools")
library("tseries")
library("FinTS")
library("sandwich")
library("stringi")
library("car")
library("AEP")
# Set working directory from clipboard
wdDir <- readClipboard()
if (grepl("\\", paste(wdDir, " ", sep = ""), fixed = TRUE)) {
setwd(wdDir)
} else {
if (Sys.getenv("USERNAME") == "David Lanham") {
setwd("C:/Users/David Lanham/OneDrive - im-sciences.com/Documents/RandExcelRegression")
} else if (Sys.getenv("USERNAME") == "Huy Nguyen") {
setwd("C:/Users/david/OneDrive/Documents/RandExcelRegression4.2.1") # to update
} else if (Sys.getenv("USERNAME") == "AndreaRimondi") {
setwd("C:/Users/AndreaRimondi/Documents/RModellingTool") # to update
} else if (Sys.getenv("USERNAME") == "IlonaZasadzinska") {
setwd("C:/Users/IlonaZasadzinska/Documents/R modelling tool") # to update
# etc.
}  else if (Sys.getenv("USERNAME") == "Luke Hamilton") {
setwd("C:/Users/Luke Hamilton/Documents/R Modelling Tool") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "vmadmin") {
setwd("C:/Users/vmadmin/Documents/RModellingTooll") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "DanielHallsworth") {
setwd("C:/Users/DanielHallsworth/Documents/R Modelling Tool") # to update
# etc.
}
}
load_all('Package/lanzR')
# Importing Data
print("1. Importing Data");source("Regression Scripts/Importing Data.R")
# Data Preparation
print("2. Data Preparation");source("Regression Scripts/Data Preparation.R")
# Variable Transformations
print("3. Variable Transformations");source("Regression Scripts/Variable Transformations.R")
# SETUP *************************************************************************************************************************************
# *******************************************************************************************************************************************
# Suppress warnings
options(warn = -1)
print("Loading packages")
library("lmtest")
library("tidyverse")
library("mgsub")
library("devtools")
library("tseries")
library("FinTS")
library("sandwich")
library("stringi")
library("car")
library("AEP")
# Set working directory from clipboard
wdDir <- readClipboard()
if (grepl("\\", paste(wdDir, " ", sep = ""), fixed = TRUE)) {
setwd(wdDir)
} else {
if (Sys.getenv("USERNAME") == "David Lanham") {
setwd("C:/Users/David Lanham/OneDrive - im-sciences.com/Documents/RandExcelRegression")
} else if (Sys.getenv("USERNAME") == "Huy Nguyen") {
setwd("C:/Users/david/OneDrive/Documents/RandExcelRegression4.2.1") # to update
} else if (Sys.getenv("USERNAME") == "AndreaRimondi") {
setwd("C:/Users/AndreaRimondi/Documents/RModellingTool") # to update
} else if (Sys.getenv("USERNAME") == "IlonaZasadzinska") {
setwd("C:/Users/IlonaZasadzinska/Documents/R modelling tool") # to update
# etc.
}  else if (Sys.getenv("USERNAME") == "Luke Hamilton") {
setwd("C:/Users/Luke Hamilton/Documents/R Modelling Tool") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "vmadmin") {
setwd("C:/Users/vmadmin/Documents/RModellingTooll") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "DanielHallsworth") {
setwd("C:/Users/DanielHallsworth/Documents/R Modelling Tool") # to update
# etc.
}
}
load_all('Package/lanzR')
# Importing Data
print("1. Importing Data");source("Regression Scripts/Importing Data.R")
# Data Preparation
print("2. Data Preparation");source("Regression Scripts/Data Preparation.R")
# Variable Transformations
print("3. Variable Transformations");source("Regression Scripts/Variable Transformations.R")
# SETUP *************************************************************************************************************************************
# *******************************************************************************************************************************************
# Suppress warnings
options(warn = -1)
print("Loading packages")
library("lmtest")
library("tidyverse")
library("mgsub")
library("devtools")
library("tseries")
library("FinTS")
library("sandwich")
library("stringi")
library("car")
library("AEP")
# Set working directory from clipboard
wdDir <- readClipboard()
if (grepl("\\", paste(wdDir, " ", sep = ""), fixed = TRUE)) {
setwd(wdDir)
} else {
if (Sys.getenv("USERNAME") == "David Lanham") {
setwd("C:/Users/David Lanham/OneDrive - im-sciences.com/Documents/RandExcelRegression")
} else if (Sys.getenv("USERNAME") == "Huy Nguyen") {
setwd("C:/Users/david/OneDrive/Documents/RandExcelRegression4.2.1") # to update
} else if (Sys.getenv("USERNAME") == "AndreaRimondi") {
setwd("C:/Users/AndreaRimondi/Documents/RModellingTool") # to update
} else if (Sys.getenv("USERNAME") == "IlonaZasadzinska") {
setwd("C:/Users/IlonaZasadzinska/Documents/R modelling tool") # to update
# etc.
}  else if (Sys.getenv("USERNAME") == "Luke Hamilton") {
setwd("C:/Users/Luke Hamilton/Documents/R Modelling Tool") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "vmadmin") {
setwd("C:/Users/vmadmin/Documents/RModellingTooll") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "DanielHallsworth") {
setwd("C:/Users/DanielHallsworth/Documents/R Modelling Tool") # to update
# etc.
}
}
load_all('Package/lanzR')
# Importing Data
print("1. Importing Data");source("Regression Scripts/Importing Data.R")
# Data Preparation
print("2. Data Preparation");source("Regression Scripts/Data Preparation.R")
# Variable Transformations
print("3. Variable Transformations");source("Regression Scripts/Variable Transformations.R")
# Regression Setup
print("4. Regression Setup");source("Regression Scripts/Regression Setup.R")
if(regApproach != "bayesian") {
# Frequentist Regression
print("5. Regression");source("Regression Scripts/OLSRegression.R")
# Diagnostic Tests
print("5.2. Diagnostic Tests");source("Regression Scripts/Diagnostic Tests.R")
} else {
# Libraries
library("brms")
library("rstan")
library("parallel")
library("bayestestR")
library("reticulate")
# Bayesian Regression
print("5. Regression");source("Regression Scripts/BAYRegression.R")
}
# Contributions & Model Outputs
print("6. Model Decomp");source("Regression Scripts/Model Decomp.R")
# Post Modeling Analysis
print("7. Post Modelling Analysis");source("Regression Scripts/Post Modelling Analysis.R")
# Export (bulk) ***********************************************************************************************************************************
# *************************************************************************************************************************************************
rm(modelDetailsCsv, xsDetailsCsv, VariableDetailsCsv, redRawVarData, transVarByXsDataLong,  modelDw, modelFit, modVarCode,
obsCnt)
rm(identVarName, kpiVarName, modelledVarNames)
print("Writing outputs")
# Export Outputs
write.csv(avmDetailsXsDf,"RegressionTables/avmDetailsXsDf.csv", row.names = FALSE)
write.csv(avmDetailsTotDf,"RegressionTables/avmDetailsTotDf.csv", row.names = FALSE)
write.csv(varContsXsDf,"RegressionTables/VarContsXsDf.csv", row.names = FALSE)
write.csv(varContsTotDf,"RegressionTables/varContsTotDf.csv", row.names = FALSE)
write.csv(catContsXsDf,"RegressionTables/catContsXsDf.csv", row.names = FALSE)
write.csv(catContsTotDf,"RegressionTables/catContsTotDf.csv", row.names = FALSE)
write.csv(regVariableDetailsDf,"RegressionTables/VariableDetails.csv", row.names = FALSE)
write.csv(regVarDetailsStackedDf,"RegressionTables/regVarDetailsStackedDf.csv", row.names = FALSE)
write.csv(modelDetailsDf,"RegressionTables/modelDetails.csv", row.names = TRUE)
write.csv(regCatStatsDf,"RegressionTables/regCatStatsDf.csv", row.names = FALSE)
write.csv(prevRunDetails,"RegressionTables/prevRunDetails.csv", row.names = FALSE)
write.table(modelPermSummary, "RegressionTables/permSummary.csv", row.names = FALSE, col.names = FALSE, sep=",") # write.table needed to remove col names
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memory and report the memory usage.
# SETUP *************************************************************************************************************************************
# *******************************************************************************************************************************************
# Suppress warnings
options(warn = -1)
print("Loading packages")
library("lmtest")
library("tidyverse")
library("mgsub")
library("devtools")
library("tseries")
library("FinTS")
library("sandwich")
library("stringi")
library("car")
library("AEP")
# Set working directory from clipboard
wdDir <- readClipboard()
if (grepl("\\", paste(wdDir, " ", sep = ""), fixed = TRUE)) {
setwd(wdDir)
} else {
if (Sys.getenv("USERNAME") == "David Lanham") {
setwd("C:/Users/David Lanham/OneDrive - im-sciences.com/Documents/RandExcelRegression")
} else if (Sys.getenv("USERNAME") == "Huy Nguyen") {
setwd("C:/Users/david/OneDrive/Documents/RandExcelRegression4.2.1") # to update
} else if (Sys.getenv("USERNAME") == "AndreaRimondi") {
setwd("C:/Users/AndreaRimondi/Documents/RModellingTool") # to update
} else if (Sys.getenv("USERNAME") == "IlonaZasadzinska") {
setwd("C:/Users/IlonaZasadzinska/Documents/R modelling tool") # to update
# etc.
}  else if (Sys.getenv("USERNAME") == "Luke Hamilton") {
setwd("C:/Users/Luke Hamilton/Documents/R Modelling Tool") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "vmadmin") {
setwd("C:/Users/vmadmin/Documents/RModellingTooll") # to update
# etc.
} else if (Sys.getenv("USERNAME") == "DanielHallsworth") {
setwd("C:/Users/DanielHallsworth/Documents/R Modelling Tool") # to update
# etc.
}
}
load_all('Package/lanzR')
# Importing Data
print("1. Importing Data");source("Regression Scripts/Importing Data.R")
# Data Preparation
print("2. Data Preparation");source("Regression Scripts/Data Preparation.R")
# Variable Transformations
print("3. Variable Transformations");source("Regression Scripts/Variable Transformations.R")
# EXTRACT RAW VARIABLES REQUIRED ********************************************************************************************************************
# ***************************************************************************************************************************************************
print("3.1 Extracting raw variables required")
# List of all raw variables
allRawVarNames <- colnames(RawInputCsv)
# List of the raw variables contained within the unique list of substituted variable names
buildSubVarNames <- gsub("[*-+/()^,-]", "@", uniqueSubVarNames$Names) %>%
gsub("[*]", "@", .) %>%
gsub("[>]", "@", .) %>%
gsub("[<]", "@", .) %>%
gsub("[=]", "@", .) %>%
strsplit("@")  %>% unlist() %>% unique()
usedRawVarNames <- allRawVarNames[allRawVarNames %in% buildSubVarNames]
# If response curves are required, we may also need the equivalent spend variable names. Also extract these
if (modelDetailsCsv[modelDetailsCsv$Metric == "Generate Response Curves?", "Detail"] == "yes") {
usedRawVarNames <- c(usedRawVarNames, rcMedSpCsv[rcMedSpCsv$raw_variable %in% usedRawVarNames, 2]) %>%
unique()
}
# New raw dataset containing only used variables
redRawVarData <- RawInputCsv %>% select(all_of(usedRawVarNames))
redRawVarDataRDate <- mutate(redRawVarData, obs = as.Date(obs, "%d/%m/%Y"))
# drop redundant variables
rm(allRawVarNames, buildSubVarNames)
# VARIABLE TRANSFORMATIONS *****************************************************************************************************************************
# ******************************************************************************************************************************************************
print("3.2 Transforming variables")
if (is.null(transformedDataLibrary)) {
# No historic transformed variables stored - transform all raw data
# Transformed Variables - run calculations from variable name strings
transVarDataWide <- lapply(1:nrow(uniqueSubVarNames), function(x)
transmute(redRawVarDataRDate, eval(parse(text=as.character(uniqueSubVarNames[x, "NamePipeSub"]))))) %>%
do.call(cbind, .) %>%
`colnames<-`(uniqueSubVarNames$NamePipeSub) %>%
`rownames<-`(as.character(redRawVarData[, identVarName]) %>% as.Date(tryFormats = "%d/%m/%Y") %>% format("%d/%m/%Y") %>% as.character()) %>%
cbind("OBS" = as.Date(redRawVarData$obs, "%d/%m/%Y"), .)
} else {
# Merge historic transformed variables with any new transformed variables
# List of new transformed variables
lastRunTransVarNames <- colnames(transformedDataLibrary)
thisRunTransVarNames <- uniqueSubVarNames$NamePipeSub
newTransVarNames <- thisRunTransVarNames[!(thisRunTransVarNames %in% lastRunTransVarNames)]
# If no new variables, use historic file
if (is_empty(newTransVarNames)) {
transVarDataWide <- transformedDataLibrary
} else {
# Transformed Variables - run calculations from variable name strings
transVarDataWide <- lapply(1:length(newTransVarNames), function(x)
transmute(redRawVarDataRDate, eval(parse(text=as.character(newTransVarNames[x]))))) %>%
do.call(cbind, .) %>%
`colnames<-`(newTransVarNames) %>%
# `rownames<-`(redRawVarData[, identVarName]) %>% remove if the below works
`rownames<-`(as.character(redRawVarData[, identVarName]) %>% as.Date(tryFormats = "%d/%m/%Y") %>% format("%d/%m/%Y") %>% as.character()) %>%
cbind("OBS" = as.Date(redRawVarData$obs, "%d/%m/%Y"), ., transformedDataLibrary[, 2:ncol(transformedDataLibrary)])
}
}
rlang::last_trace()
sum(is.na(your_data$seas_black_friday))
sum(is.na(RawInputCsv$seas_black_friday))
sum(is.na(RawInputCsv$seas_black_friday))
RawInputCsv$seas_black_friday
sum(RawInputCsv$seas_black_friday)
