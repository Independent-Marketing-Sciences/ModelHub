#' Run emotion analysis on text 
#'
#' Asks for source format (file path or dataset) and industry. 
#' Then runs emotions analysis on each row of the dataset / document. 
#'
#' A data.frame will be returned, with the addition of the emotion columns.
#' 
#' The emotions included are: 
#' \itemize{
#'   \item joy
#'   \item trust
#'   \item surprise
#'   \item fear
#'   \item sadness
#'   \item anger
#'   \item disgust
#'   \item anticipation
#'   \item positive
#'   \item negative
#' }
#'
#' @return A data.frame with the emotion scores.
#' 
#' @param path_to_file The path to the file.
#' 
#' @param text_column The text column of the file to get the emotions.
#' 
#' @param sentiment_set The sentiment data set. Defaults to nrc.
#' 
#' @param emotions The emotions to choose from. Select from the list in Details.
#'  Setting to 'joy', 'trust', 'fear', 'sadness', 'anger', 'disgust', 'positive' 
#'  because the words in the lexicon are roughly the same between positive and
#'  negative sentiment.
#'
#' @examples
#' \dontrun{
#' run_emotions(path_to_file, 'full text', 'nrc')
#' }
#'
#' @export
run_emotions <- function (path_to_file,
                          text_column, 
                          sentiment_set = 'nrc',
                          emotions = c('joy', 'trust', 'fear', 
                                       'sadness', 'anger', 
                                       'disgust', 'positive',
                                       'negative')) {
  
  #get the directory
  directory_of_file <- dirname(path_to_file)
  file_name <- basename(path_to_file)
  file_name <- gsub('.xlsx', '', file_name, fixed = TRUE)
  file_name <- gsub('.csv', '', file_name, fixed = TRUE)

  #check if data frame  
  if (!is.data.frame(path_to_file)) {
    x <- readxl::read_xlsx(path_to_file)
  }
  
  #select the text column
  text_df <- dplyr::select(x, text_column)
  
  sentiment_set <- tidytext::get_sentiments(sentiment_set)
  sentiment_set <- sentiment_set[sentiment_set$sentiment %in% emotions, ]
 
  emotions_temp <- lapply(1:length(emotions), function(x) 0)
  emotions_temp <- as.data.frame(emotions_temp)
  names(emotions_temp) <- emotions
  ######################
  #start main procedure#
  ######################
  emotions_scoring <- pbapply::pblapply(text_df[[text_column]], function(x) {
    
    #start with the temp df for emotions
    df <- emotions_temp
    
    #make tokens
    tokens <- dplyr::data_frame(text = x) %>% 
      tidytext::unnest_tokens(word, text)
      
    #create emotions data set
    tryCatch({
        
      emotions <- tokens %>% 
        dplyr::inner_join(sentiment_set, by = 'word') %>%
        dplyr::count(sentiment)
      
    }, error = function(e) {
      
      emotions <- NULL
      emotions
    })
    
    #if emotions is of length zero i.e. no emotional words then return df
    if (is.null(emotions)) return(df)
   
    #add the score
    emotions$score <- emotions$n / sum(emotions$n)
      
    #convert to data.frame
    emotions <- as.data.frame(emotions)
      
    #add the values to emotions df
    for (colname in emotions$sentiment) {
        
        df[1, colname] <- emotions[emotions$sentiment == colname, 'score']
        
    }
    
    #return from lapply
    df
    
  })
  
  #convert list to data.frame
  emotions_scoring <- dplyr::bind_rows(emotions_scoring)
  #cbind data frame to original
  new_df <- dplyr::bind_cols(x, emotions_scoring)
  
  #write to disk
  new_file_name <- paste0(directory_of_file, 
                          '/', 
                          file_name, 
                          '_emotions.xlsx')
  writexl::write_xlsx(new_df, new_file_name)
  
  #return
  cat('\nEmotions added successfully!\n')
  cat(paste0('Output file: ', new_file_name))
  invisible(NULL)
}


